#!/bin/bash

# Script de pr√©-d√©ploiement pour Green Beauty Website
# Ce script effectue les v√©rifications et optimisations n√©cessaires avant le d√©ploiement

set -e  # Arr√™ter le script en cas d'erreur

echo "üöÄ D√©but du script de pr√©-d√©ploiement..."

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 1. V√©rifier que Node.js est install√©
print_status "V√©rification de Node.js..."
if ! command -v node &> /dev/null; then
    print_error "Node.js n'est pas install√©"
    exit 1
fi
NODE_VERSION=$(node --version)
print_success "Node.js version: $NODE_VERSION"

# 2. V√©rifier que npm est install√©
print_status "V√©rification de npm..."
if ! command -v npm &> /dev/null; then
    print_error "npm n'est pas install√©"
    exit 1
fi
NPM_VERSION=$(npm --version)
print_success "npm version: $NPM_VERSION"

# 3. Nettoyer les caches
print_status "Nettoyage des caches..."
rm -rf node_modules/.cache
rm -rf dist
print_success "Caches nettoy√©s"

  # 4. Installer les d√©pendances
  print_status "Installation des d√©pendances..."
  npm ci
  print_success "D√©pendances install√©es"

# 5. V√©rifier les variables d'environnement
print_status "V√©rification des variables d'environnement..."
if [ -f ".env" ]; then
    print_success "Fichier .env trouv√©"
else
    print_warning "Aucun fichier .env trouv√© - v√©rifiez vos variables d'environnement"
fi

# 6. Linter le code
print_status "V√©rification du code avec ESLint..."
if npm run lint; then
    print_success "Linting r√©ussi"
else
    print_error "Erreurs de linting d√©tect√©es"
    exit 1
fi

# 7. Formater le code
print_status "Formatage du code avec Prettier..."
if npm run format; then
    print_success "Formatage r√©ussi"
else
    print_warning "Erreurs de formatage d√©tect√©es"
fi

# 8. Build de production
print_status "Build de production..."
if npm run build; then
    print_success "Build de production r√©ussi"
else
    print_error "√âchec du build de production"
    exit 1
fi

# 9. V√©rifier la taille du build
print_status "V√©rification de la taille du build..."
BUILD_SIZE=$(du -sh dist | cut -f1)
print_success "Taille du build: $BUILD_SIZE"

# 10. Tests de base (si configur√©s)
if [ -f "package.json" ] && grep -q "\"test\":" package.json; then
    print_status "Ex√©cution des tests..."
    if npm test; then
        print_success "Tests r√©ussis"
    else
        print_error "Tests √©chou√©s"
        exit 1
    fi
else
    print_warning "Aucun script de test configur√©"
fi

# 11. V√©rification de s√©curit√©
print_status "V√©rification de s√©curit√© avec npm audit..."
if npm audit --audit-level=moderate; then
    print_success "Aucune vuln√©rabilit√© critique d√©tect√©e"
else
    print_warning "Vuln√©rabilit√©s d√©tect√©es - v√©rifiez npm audit"
fi

# 12. Optimisations finales
print_status "Optimisations finales..."
# Nettoyer les fichiers temporaires
find . -name "*.tmp" -delete
find . -name "*.log" -delete

print_success "‚úÖ Script de pr√©-d√©ploiement termin√© avec succ√®s!"
print_status "Votre application est pr√™te pour le d√©ploiement"

# Afficher un r√©sum√©
echo ""
echo "üìã R√©sum√© du pr√©-d√©ploiement:"
echo "   - Node.js: $NODE_VERSION"
echo "   - npm: $NPM_VERSION"
echo "   - Build: $BUILD_SIZE"
echo "   - Linting: ‚úÖ"
echo "   - Formatage: ‚úÖ"
echo "   - Build: ‚úÖ"
echo ""
echo "üöÄ Pr√™t pour le d√©ploiement!" 